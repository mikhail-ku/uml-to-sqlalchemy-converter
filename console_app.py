import os
from core import init_application, build_processing_chain, process_folder, save_results

def run_console_app():
    """–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        llm, parser, config, system_prompt = init_application()

        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        while True:
            mode_choice = input(
                "\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n1. –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Ä–µ–∂–∏–º (–≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–º–µ—Å—Ç–µ)\n2. –†–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–π —Ä–µ–∂–∏–º (–∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ)\n–í–∞—à –≤—ã–±–æ—Ä (1/2): ").strip()
            if mode_choice in ('1', '2'):
                break
            else:
                print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        folder = input("\nüìÅ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å UML-–¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏: ")
        image_paths = process_folder(folder)

        if not image_paths:
            print("‚ùå –í –ø–∞–ø–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ (jpg, png, bmp)")
            exit()

        print(f"\nüîç –ù–∞–π–¥–µ–Ω–æ {len(image_paths)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ø–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        chain = build_processing_chain(llm, parser, system_prompt)

        # –ó–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        print("\nüîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É UML-–¥–∏–∞–≥—Ä–∞–º–º...")

        if mode_choice == '1':  # –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Ä–µ–∂–∏–º
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
            filenames_comment = ", ".join(os.path.basename(path) for path in image_paths)
            comment_line = f"# –ö–æ–¥ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {filenames_comment}"

            result = chain.invoke(image_paths)
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–µ—á–Ω–µ–º —Ñ–∞–π–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–æ –∫–æ–¥–∞
            result.code = comment_line + "\n" + result.code
            save_results(result, config)

            if input("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –∫–æ–¥? (y/n): ").lower() == 'y':
                print("\n" + result.code)

        elif mode_choice == '2':  # –†–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–π —Ä–µ–∂–∏–º
            for img_path in image_paths:
                basename = os.path.splitext(os.path.basename(img_path))[0]
                print(f"\nüîé –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {basename}")

                result = chain.invoke([img_path])
                output_filename = f"{basename}_orm.py"

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ –Ω–∞—á–∞–ª–µ –∫–æ–¥–∞
                modified_code = f"# –ö–æ–¥ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {basename}\n" + result.code
                result.code = modified_code

                save_results(result, config, output_filename)

                if input(f"–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥ –¥–ª—è {basename}? (y/n): ").lower() == 'y':
                    print("\n" + result.code)

    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        if "credentials" in str(e).lower():
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ GigaChat")

if __name__ == "__main__":
    run_console_app()